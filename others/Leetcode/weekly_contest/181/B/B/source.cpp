#include<cstdio>
#include<cmath>
#include<string>
#include<vector>
#include<algorithm>
#include<set>
#include<map>
#include<stack>
#include<queue>
#include<cstring>

using namespace std;

class Solution {
public:
	int sumFourDivisors(vector<int>& nums) {

		vector<long long> prime;
		vector<long long> lnum;

		prime.push_back(2);

		for (long long i = 3; i < 100000; i += 2) {
			bool isprime = true;

			for (long long j = 0; j < prime.size() && prime[j] * prime[j] <= i; j++) {
				if (!(i%prime[j])) {
					isprime = false;

					break;
				}
			}

			if (isprime) {
				prime.push_back(i);
			}
		}

		bool primality[100001] = { 0, };

		for (long long i = 0; i < prime.size(); i++) {
			primality[prime[i]] = true;
		}

		long long n;
		n = nums.size();

		for (long long i = 0; i < n; i++) {
			lnum.push_back(nums[i]);
		}

		long long sol = 0;

		bool check[100001] = { 0, };

		check[1] = true;

		for (long long i = 0; i < n; i++) {
			for (long long j = 0; j < prime.size() && prime[j] * prime[j] <= lnum[i]; j++) {
				if (!(lnum[i] % prime[j])) {
					long long another;

					another = lnum[i] / prime[j];

					if (primality[another] && prime[j] != another) {
						sol += 1 + prime[j] + another + lnum[i];

						/*
						check[prime[j]] = true;
						check[another] = true;
						check[lnum[i]] = true;
						*/

						break;
					}

					long long half;

					half = (long long)sqrt(another);

					if (half * half == another && half == prime[j]) {
						sol += 1 + prime[j] + another + lnum[i];

						/*
						check[prime[j]] = true;
						check[another] = true;
						check[lnum[i]] = true;
						*/

						break;
					}
				}
			}
		}

		/*
		for (long long i = 1; i <= 100000; i++) {
			if (check[i]) {
				sol += i;
			}
		}
		*/

		return (int)sol;
	}
};

int main()
{
	Solution s;
	vector<int> arr = { 33125, 16567, 89993, 3313, 13766, 40602, 50680, 59265, 35135, 3639, 44282, 79385, 48191, 37350, 12857, 14301, 576, 58422, 47882, 53295, 26948, 10433, 95801, 74971, 9450, 23101, 25653, 79071, 61012, 43595, 46600, 43498, 32595, 9616, 80489, 70600, 73027, 71519, 20397, 88204, 18451, 19102, 89821, 63470, 72727, 39218, 46376, 47362, 26526, 68099, 49100, 46277, 53761, 221, 18002, 55085, 7606, 90582, 94978, 99102, 82940, 99042, 51914, 72772, 96749, 62320, 98841, 86062, 97852, 79043, 22319, 19604, 53492, 39364, 6469, 9037, 84788, 34874, 36006, 72105, 48122, 10637, 1414, 29664, 60845, 77072, 12977, 43422, 66800, 97761, 43631, 15549, 14292, 51644, 61727, 27730, 24491, 35634, 44410, 79652, 68583, 44029, 34647, 76175, 9774, 88856, 15904, 10340, 75707, 69909, 68951, 93732, 32598, 47175, 19173, 35032, 28397, 49710, 78643, 58884, 17704, 11040, 8774, 10573, 91299, 42485, 41490, 87155, 2357, 15462, 9494, 43106, 81752, 2772, 78181, 90432, 42895, 36441, 9274, 82199, 95684, 402, 77087, 80494, 15010, 21186, 37981, 29424, 15709, 47241, 12947, 63531, 30249, 69803, 66465, 31085, 42341, 26889, 84185, 73814, 94494, 2313, 89071, 62227, 33812, 87861, 63926, 63584, 31409, 25131, 45725, 97574, 779, 37861, 48628, 68313, 9860, 73706, 44936, 62831, 82713, 93967, 90413, 63027, 89083, 77645, 13838, 73022, 1842, 81069, 32033, 87817, 42176, 61664, 60274, 22107, 74652, 49371, 75610, 4374, 15551, 12684, 42845, 36012, 34287, 15533, 43561, 98610, 96924, 69712, 3266, 74704, 76152, 11154, 13196, 34179, 70017, 91712, 61371, 53620, 12999, 64282, 46278, 87702, 68960, 26563, 58174, 73887, 84856, 1170, 15135, 88069, 77755, 18047, 28851, 63889, 86102, 49464, 59229, 58056, 29105, 63852, 51386, 31663, 9049, 80669, 97039, 66529, 18739, 25994, 73056, 64176, 14858, 75133, 80917, 21763, 8835, 44459, 96741, 20985, 21015, 7239, 50062, 25269, 7316, 13635, 55115, 60850, 91187, 93970, 32930, 36994, 9597, 42738, 37686, 80116, 62480, 2482, 7293, 69192, 5936, 6035, 89325, 51208, 63499, 6701, 61717, 47540, 81726, 40251, 52698, 18258, 52070, 27925, 49112, 84852, 33133, 22191, 28095, 60702, 18989, 66076, 13427, 14611, 86568, 49124, 27254, 79375, 69440, 3712, 42154, 53306, 15810, 19058, 59265, 31611, 96767, 4136, 40148, 35059, 86354, 16574, 13814, 64967, 88736, 9678, 59877, 54350, 83540, 56874, 20693, 61468, 66439, 93096, 4140, 3686, 11788, 66678, 27999, 16434, 4574, 20321, 22509, 7237, 80055, 87172, 61721, 24441, 12360, 72895, 11270, 65077, 81799, 27165, 16090, 83675, 87562, 66449, 82043, 49145, 20580, 97207, 1022, 48354, 76296, 60125, 48214, 50942, 69243, 12993, 4722, 13474, 92229, 3340, 44564, 57667, 69700, 80990, 76187, 76595, 7416, 5994, 57891, 33361, 87723, 52278, 39456, 77324, 88162, 25797, 56118, 45732, 55500, 40086, 33897, 77363, 83719, 87517, 95154, 21421, 21705, 57599, 24950, 54987, 93066, 83229, 99852, 26879, 20363, 98675, 45876, 13124, 89177, 36681, 14459, 20064, 93324, 15251, 53748, 87230, 54941, 39335, 67123, 74815, 77079, 15417, 6929, 42876, 72642, 37834, 66088, 14429, 37101, 49674, 63724, 73506, 35927, 16643, 48900, 93406, 90208, 88277, 49291, 94169, 54058, 50786, 33018, 44002, 74109, 52169, 93440, 18776, 10891, 46469, 18825, 9667, 29155, 57779, 90524, 54922, 35401, 65191, 87169, 29521, 37263, 21028, 27278, 33291, 20749, 68457, 87464, 80514, 51939, 88153, 88668, 29560, 51695, 87878, 91273, 27133, 55861, 34367, 30622, 23902, 84679, 26510, 78227, 95158, 12628, 53614, 66341, 63046, 74984, 58852, 74973, 52362, 25278, 52373, 88580, 22931 };

	s.sumFourDivisors(arr);
}