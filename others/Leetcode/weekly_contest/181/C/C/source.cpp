#include<cstdio>
#include<cmath>
#include<string>
#include<vector>
#include<algorithm>
#include<set>
#include<map>
#include<stack>
#include<queue>
#include<cstring>

using namespace std;

class Solution {
public:
	int n, m;

	bool safe(int x, int y) {
		return x >= 0 && x < n&&y >= 0 && y < m;
	}
	bool hasValidPath(vector<vector<int>>& grid) {

		n = grid.size();
		m = grid[0].size();

		bool visited[300][300] = { 0, };
		int x = 0, y = 0;
		int dir;
		int dx[4] = { 0,0,-1,1 };
		int dy[4] = { -1,1,0,0 };

		bool two = false;
		bool second = false;

		if (n == 1 && m == 1) {
			return true;
		}

		switch (grid[0][0]) {
		case 1:
			dir = 1;
			break;
		case 2:
			dir = 3;
			break;
		case 3:
			dir = 3;
			break;
		case 4:
			dir = 1;
			two = true;
			break;

			/*
			if (n == 1 && m == 1) {
				return true;
			}
			return false;
			*/
		case 5:
			return false;
		case 6:
			dir = 1;
			break;
		}

		visited[x][y] = true;

		x = x + dx[dir];
		y = y + dy[dir];

		if (!safe(x, y)) {
			if (two) { second = true; }
			else { return false; }
		}

		if (!second) {
			while (1) {
				visited[x][y] = true;

				int nx, ny;
				int ndir;

				ndir = dir;

				switch (grid[x][y]) {
				case 1:
					if (dir != 0 && dir != 1) {
						if (two) { second = true; break; }
						else { return false; };
					}
					break;
				case 2:
					if (dir != 2 && dir != 3) {
						if (two) { second = true; break; }
						else { return false; };
					}
					break;
				case 3:
					if (dir == 1) {
						ndir = 3;
					}
					else if (dir == 2) {
						ndir = 0;
					}
					else {
						if (two) { second = true; break; }
						else { return false; };
					}
					break;
				case 4:
					if (dir == 0) {
						ndir = 3;
					}
					else if (dir == 2) {
						ndir = 1;
					}
					else {
						if (two) { second = true; break; }
						else { return false; };
					}
					break;
				case 5:
					if (dir == 3) {
						ndir = 0;
					}
					else if (dir == 1) {
						ndir = 2;
					}
					else {
						if (two) { second = true; break; }
						else { return false; };
					}
					break;
				case 6:
					if (dir == 3) {
						ndir = 1;
					}
					else if (dir == 0) {
						ndir = 2;
					}
					else {
						if (two) { second = true; break; }
						else { return false; };
					}
					break;
				}

				if (second) {
					break;
				}

				if (x == n - 1 && y == m - 1) {
					return true;
				}

				nx = x + dx[ndir];
				ny = y + dy[ndir];

				if (!(safe(nx, ny))) {
					if (two) { second = true; break; }
					else { return false; };
				}

				if (visited[nx][ny] && (x != n - 1 || y != m - 1)) {
					if (two) { second = true; break; }
					else { return false; };
				}

				x = nx;
				y = ny;
				dir = ndir;
			}
		}

		if (second) {
			two = false;
			dir = 3;

			x = 1;
			y = 0;

			memset(visited, 0, sizeof(visited));

			visited[0][0] = true;

			if (!safe(x, y)) {
				if (two) { second = true; }
				else { return false; }
			}

			while (1) {
				visited[x][y] = true;

				int nx, ny;
				int ndir;

				ndir = dir;

				switch (grid[x][y]) {
				case 1:
					if (dir != 0 && dir != 1) {
						if (two) { second = true; break; }
						else { return false; };
					}
					break;
				case 2:
					if (dir != 2 && dir != 3) {
						if (two) { second = true; break; }
						else { return false; };
					}
					break;
				case 3:
					if (dir == 1) {
						ndir = 3;
					}
					else if (dir == 2) {
						ndir = 0;
					}
					else {
						if (two) { second = true; break; }
						else { return false; };
					}
					break;
				case 4:
					if (dir == 0) {
						ndir = 3;
					}
					else if (dir == 2) {
						ndir = 1;
					}
					else {
						if (two) { second = true; break; }
						else { return false; };
					}
					break;
				case 5:
					if (dir == 3) {
						ndir = 0;
					}
					else if (dir == 1) {
						ndir = 2;
					}
					else {
						if (two) { second = true; break; }
						else { return false; };
					}
					break;
				case 6:
					if (dir == 3) {
						ndir = 1;
					}
					else if (dir == 0) {
						ndir = 2;
					}
					else {
						if (two) { second = true; break; }
						else { return false; };
					}
					break;
				}

				if (x == n - 1 && y == m - 1) {
					return true;
				}

				nx = x + dx[ndir];
				ny = y + dy[ndir];

				if (!(safe(nx, ny))) {
					if (two) { second = true; break; }
					else { return false; };
				}

				if (visited[nx][ny] && (x != n - 1 || y != m - 1)) {
					if (two) { second = true; break; }
					else { return false; };
				}

				x = nx;
				y = ny;
				dir = ndir;
			}
		}

		return true;
	}
};

int main()
{
	Solution s;
	vector<vector<int>> arr = { { 4,4,3,4,1,2,2,6,3,1,6,4,5,5,4,6,5,5,3,6,3,1,2,4,5,6,6,5,5,4,4,3,3,6,1,4,3,2,2,6,6,5,4,6,2,1 },{ 6,4,6,2,4,2,6,6,2,4,6,6,2,6,4,2,4,6,1,4,6,6,6,1,1,2,3,6,3,3,2,2,5,2,1,4,6,3,4,5,3,1,1,4,3,4 },{ 2,5,6,1,6,3,4,5,5,1,4,5,4,3,2,3,6,5,3,2,5,5,4,4,2,1,4,5,2,4,5,3,1,1,4,4,5,6,2,4,3,4,3,6,5,5 },{ 4,4,1,5,3,6,6,2,4,2,2,6,1,6,1,6,2,2,6,5,1,5,4,3,4,1,1,5,2,2,5,1,3,6,5,1,6,4,6,3,5,6,4,2,4,2 },{ 3,1,6,6,3,1,6,5,1,4,5,6,2,1,1,6,2,5,6,1,4,2,2,6,5,1,2,3,6,6,5,3,4,1,2,5,6,2,4,1,4,1,3,5,1,3 },{ 6,4,1,1,3,3,1,2,4,3,6,2,4,4,6,5,4,1,6,3,2,5,5,3,4,4,4,1,3,4,2,2,3,3,5,6,2,6,3,3,2,5,3,4,5,2 },{ 1,2,1,4,5,2,1,1,1,1,4,4,2,6,1,2,1,6,1,6,1,6,5,3,2,1,3,4,5,5,1,4,3,5,6,2,5,2,1,6,6,4,4,3,2,2 },{ 6,6,4,2,3,4,1,2,5,3,5,1,6,4,6,4,1,1,1,5,5,5,1,6,1,2,3,5,6,6,5,1,4,1,1,5,3,6,5,1,3,3,5,4,2,5 },{ 4,3,1,2,4,3,3,6,1,1,3,3,6,3,6,4,3,3,6,4,3,3,1,4,3,4,6,1,6,4,5,6,1,6,4,4,3,6,2,1,1,6,2,3,4,1 },{ 6,2,4,5,4,2,2,2,6,4,4,1,6,3,5,1,3,4,3,2,6,1,5,1,5,5,4,6,2,4,2,6,5,1,6,1,5,1,3,1,5,4,4,5,6,3 },{ 3,4,5,3,1,3,2,1,3,5,2,2,4,1,6,4,2,6,4,6,4,2,6,2,4,4,2,4,6,4,3,2,4,1,3,1,6,4,2,2,3,4,4,4,4,2 },{ 2,1,5,1,4,1,2,5,4,3,4,3,3,1,4,4,6,4,1,6,5,6,1,6,5,4,6,2,1,5,1,4,6,6,6,4,6,4,4,2,1,4,1,4,3,5 },{ 4,2,1,5,5,2,3,5,2,3,4,2,3,3,4,5,5,2,5,4,5,4,4,4,4,4,4,1,3,1,5,1,5,3,1,6,1,1,1,2,4,6,3,4,4,1 },{ 3,5,6,4,1,5,5,6,3,2,5,1,3,5,2,5,3,2,4,2,1,1,5,1,1,4,6,2,5,6,6,6,1,6,4,4,3,5,5,6,4,1,2,4,3,3 },{ 4,6,4,1,3,2,4,6,5,2,5,5,2,5,3,4,2,4,3,6,6,3,6,6,5,4,5,1,1,1,4,6,6,1,2,2,4,2,2,5,1,3,5,5,2,1 },{ 6,3,3,2,3,6,6,5,6,1,3,3,6,1,5,6,2,2,1,4,6,2,3,4,4,2,4,6,3,5,3,1,3,2,2,3,3,6,5,2,4,6,5,4,1,4 },{ 4,5,2,2,1,1,6,5,3,4,6,1,5,3,3,1,1,1,5,4,4,5,4,6,1,5,3,5,2,1,4,4,5,3,5,2,6,1,3,2,2,2,3,4,3,6 },{ 1,2,4,1,6,3,1,3,4,3,5,6,6,5,2,4,5,3,1,1,5,6,2,3,3,1,5,2,5,1,3,4,1,3,4,5,6,3,3,4,2,5,4,6,1,4 },{ 4,3,5,2,1,4,1,1,5,3,2,2,2,1,1,4,3,4,2,1,6,6,6,1,3,4,5,4,3,3,2,2,6,5,4,4,3,6,2,6,2,4,1,4,2,3 },{ 3,2,3,1,6,6,6,4,1,2,6,3,3,5,2,3,6,1,3,6,4,1,3,4,1,4,3,5,2,1,3,1,6,6,2,6,3,6,5,6,2,4,6,5,5,2 },{ 6,4,2,4,2,2,3,3,5,2,2,1,3,1,3,1,2,5,5,6,4,2,2,2,3,5,4,1,5,2,4,2,4,3,4,2,6,2,5,3,3,6,4,2,3,2 },{ 4,1,3,6,1,4,6,5,3,4,6,5,1,4,5,5,4,2,2,1,6,3,3,4,3,4,5,2,4,4,4,4,4,2,6,3,2,4,1,1,4,4,6,4,2,3 },{ 2,6,3,5,5,1,3,6,2,2,3,1,4,1,2,6,4,3,6,2,5,2,4,5,2,5,4,5,6,2,3,3,5,6,3,3,3,5,1,1,5,6,6,1,4,3 },{ 3,5,2,4,3,6,1,3,6,6,6,2,4,1,6,5,4,6,6,2,1,4,1,5,6,4,6,6,2,2,4,3,6,3,3,1,3,5,2,1,5,6,1,2,1,1 },{ 2,3,4,3,2,1,1,2,4,5,2,5,3,3,1,2,6,4,6,5,4,6,6,3,3,2,1,1,1,4,5,6,2,5,1,2,6,6,6,3,2,4,5,1,6,5 },{ 1,5,4,1,5,5,2,5,6,2,3,4,4,3,2,1,3,2,4,1,2,3,6,2,3,6,5,3,5,5,6,1,5,5,2,3,1,3,2,2,6,6,1,4,1,2 },{ 3,6,5,3,5,4,2,6,4,3,6,3,1,5,2,5,5,6,3,1,4,6,2,1,3,1,2,1,1,1,4,3,4,3,5,5,2,6,6,3,1,1,3,3,3,2 },{ 2,5,4,3,2,4,2,1,3,1,2,3,2,1,1,2,1,3,5,4,6,5,5,3,1,3,1,4,3,4,2,2,1,5,3,5,3,3,6,4,6,4,2,3,2,5 },{ 5,6,6,3,6,1,5,5,3,1,2,2,5,6,4,5,2,6,2,1,1,2,6,1,3,6,2,3,1,4,4,1,1,4,6,3,2,2,5,1,3,4,2,3,6,5 },{ 2,5,6,5,5,1,1,4,1,4,6,3,4,2,1,6,5,2,3,3,1,3,2,2,5,6,4,2,5,4,6,6,3,6,1,1,5,2,1,6,2,3,4,6,5,6 },{ 1,6,4,4,5,2,1,2,5,3,6,1,1,6,2,6,1,1,6,2,3,4,6,3,2,3,4,5,2,1,3,2,1,3,4,4,2,5,5,3,4,2,3,3,6,2 },{ 3,2,5,4,4,4,2,4,6,4,5,4,5,2,1,1,4,5,2,5,5,3,5,5,5,2,6,3,6,1,1,1,5,3,6,1,6,5,5,3,6,5,4,2,1,1 },{ 1,1,1,3,6,1,3,5,4,2,2,4,6,5,3,5,6,1,6,2,6,3,1,6,1,6,3,1,5,4,1,1,4,4,4,1,1,3,4,3,5,2,3,5,4,4 },{ 2,6,4,2,3,3,4,6,6,6,2,4,2,3,4,1,1,4,1,3,4,5,5,3,6,1,4,1,6,2,1,4,6,5,2,3,1,6,4,6,1,4,4,6,5,3 },{ 2,4,5,2,5,1,6,6,6,1,6,3,3,6,2,1,6,2,2,4,4,3,2,1,3,1,4,1,5,5,6,6,2,4,6,2,3,5,1,3,5,1,2,5,1,6 },{ 2,1,1,1,6,3,5,6,2,2,4,6,1,3,2,3,6,6,2,5,5,2,1,1,2,4,4,4,3,2,5,2,6,6,4,6,3,3,5,4,4,3,1,5,1,1 },{ 1,5,4,4,3,1,4,1,2,1,1,6,1,6,2,4,3,2,3,1,6,4,1,5,2,2,2,2,5,5,4,4,2,6,5,5,1,6,1,3,1,5,4,6,3,4 },{ 2,4,5,1,3,3,3,3,4,5,6,4,1,5,5,1,6,3,2,3,5,5,3,1,1,6,1,4,5,4,1,1,4,5,3,5,5,5,2,5,5,2,1,5,5,3 },{ 2,1,1,1,6,3,4,2,3,2,5,3,5,5,6,3,3,1,3,5,3,5,5,3,6,5,3,5,5,1,6,2,2,3,3,6,1,1,4,2,3,6,6,2,2,4 },{ 1,4,5,2,5,5,2,4,5,3,3,5,2,4,5,6,6,1,6,4,3,4,1,2,4,4,6,3,2,3,5,1,1,2,5,1,5,4,4,4,4,3,2,4,5,2 },{ 2,4,5,4,6,5,5,4,3,6,3,6,1,5,5,2,3,2,6,1,5,4,4,5,4,6,3,1,2,4,3,2,1,3,6,6,2,1,3,6,5,1,1,1,1,5 },{ 6,1,3,1,3,6,1,3,3,6,3,3,5,5,2,5,1,2,4,5,4,4,2,6,4,5,4,3,6,6,2,4,3,5,4,3,2,4,6,5,3,2,3,6,5,5 },{ 3,3,6,2,1,6,1,3,2,3,1,4,2,5,6,3,6,2,6,5,6,4,5,5,3,4,4,3,4,5,3,4,2,5,2,2,4,4,5,2,4,4,6,6,1,5 },{ 6,4,2,4,4,6,4,2,2,3,4,3,4,1,5,1,2,2,4,4,6,2,4,6,1,2,3,5,1,4,3,2,2,3,3,5,3,3,5,4,4,1,2,3,6,2 },{ 5,2,6,5,4,3,5,4,6,2,2,6,1,2,6,2,5,3,5,3,4,3,5,2,2,4,5,3,5,6,4,1,6,1,3,3,4,1,5,1,1,4,6,3,3,3 },{ 4,1,3,4,6,3,6,2,6,1,5,4,4,5,2,5,2,2,6,4,1,2,4,5,6,5,3,2,6,5,1,5,3,2,2,4,6,4,6,3,1,6,1,6,2,5 },{ 2,4,1,4,2,6,3,4,2,2,3,2,2,5,2,4,1,6,2,2,6,1,3,4,5,2,6,2,1,1,1,5,2,1,5,1,2,3,3,5,6,1,3,3,1,4 },{ 2,6,4,2,2,6,3,2,5,2,4,3,4,2,4,2,6,6,1,1,4,5,2,1,4,6,4,1,6,6,6,2,4,4,2,3,6,2,3,4,6,3,1,4,2,1 } };

	s.hasValidPath(arr);
}